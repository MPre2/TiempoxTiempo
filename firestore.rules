rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(chatId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // Reglas para usuarios
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // No permitir eliminación de usuarios
    }

    // Reglas para servicios
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.providerId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.providerId == request.auth.uid;
    }

    // Reglas para transacciones
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
        (resource.data.providerId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.providerId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      allow delete: if false;
    }

    // Reglas para chats
    match /chats/{chatId} {
      allow read: if isAuthenticated() && isParticipant(chatId);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isParticipant(chatId);
      allow delete: if false;

      // Reglas para mensajes dentro de chats
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isParticipant(chatId);
        allow create: if isAuthenticated() && isParticipant(chatId);
        allow update: if isAuthenticated() && 
          (resource.data.senderId == request.auth.uid);
        allow delete: if false;
      }
    }

    // Reglas para notificaciones
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Reglas para reseñas
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
      allow delete: if false;
    }

    // Reglas para insignias
    match /badges/{badgeId} {
      allow read: if isAuthenticated();
      allow create: if false; // Solo se crean desde el backend
      allow update: if false;
      allow delete: if false;
    }

    // Reglas para logros
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow create: if false; // Solo se crean desde el backend
      allow update: if false;
      allow delete: if false;
    }

    // Reglas para niveles
    match /levels/{levelId} {
      allow read: if isAuthenticated();
      allow create: if false; // Solo se crean desde el backend
      allow update: if false;
      allow delete: if false;
    }

    // Reglas para clasificaciones
    match /leaderboards/{leaderboardId} {
      allow read: if isAuthenticated();
      allow create: if false; // Solo se crean desde el backend
      allow update: if false;
      allow delete: if false;
    }
  }
} 